<!SWEETHEART html>

<python>
# some nice python code can be given here, many thanks to Brython.js!
# SweetHeart preset also RethinkDB/WebSocket/Vue3 capabilities for you

def on_update(event):

    """ realtime database updating wihin a Vue App using ReQL/Websocket 
        this function should be called only through html event attributes
        e.g. <input id="row1:colname" type="text" v-on:keyup="update"> """

    r.table("grid")
    r.filter({'id':event.target.id})
    r.update({'value':event.target.value})
    r.send()

def on_message(event):

    """ catch ReQL/Websocket messages here """

    data = json.loads(event.data)
    console.log(data)

    if data['scope'] == "setVueData":
        console.log(f"window.vdata.{data['attribute']} = data['data']")
        exec(f"window.vdata.{data['attribute']} = data['data']")

def vue_mounted(vdata):

    """ will be called as soon as the Vue model is existing 
        this allows you fecthing data using ReQL creating a Vue3 App 
        NB: every vdata attributes must be set within createVueApp """

    window.vdata = vdata
    r.table("grid").count().set("row_nbr")
    console.log(vdata)

createVueApp({
    # Vue data are set here as a python dict:

    'headers': "ABCDE",
    'row_nbr': 3,
})

</python>


<div v-cloak id="VueApp" class="m-2">
  <h1 class="text-xl">Realtime Table</h1>

  <table class="table-auto">
    <thead>
      <tr>
        <th v-for="th in headers" class="border">{{ th }}</th>
      </tr>
    </thead>
    <tbody>
      <tr v-for="row in row_nbr">
        <td v-for="col in headers.length" class="border">
          <input v-bind:id="row+':'+col" type="text" v-on:keyup="update">
        </td>
      </tr>
    </tbody>
  </table>
</div>
