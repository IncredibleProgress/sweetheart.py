<%
# PYTHON optionnal args:
# load = "tailwind|bootstrap|w3 py|pylibs alpine|vue reql d3"
load = get('load',get('__load__',''))
lang = get('lang',get('__lang__','en'))
dbname = get('dbname',get('__db__','test'))
%>
<!DOCTYPE html>
<html lang="{% lang %}">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
%#
% if "tailwind" in load:
  <link rel="stylesheet" href="/resources/tailwind.css">
% elif "bootstrap" in load:
  <!--[if IE]><meta http-equiv="X-UA-Compatible" content="IE=edge"><![endif]-->
  <link rel="stylesheet" href="/resources/node_modules/bootstrap/dist/css/bootstrap.min.css">
  <script src="/resources/node_modules/jquery/dist/jquery.slim.min.js"></script>
  <script src="/resources/node_modules/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
% elif "w3" in load:
  <link rel="stylesheet" href="/resources/w3.css">
% end
%#
% if "pylibs" in load:
  <script src="/resources/node_modules/brython/brython.js"></script>
  <script src="/resources/node_modules/brython/brython_stdlib.js"></script>
% elif "py" in load: 
  <script src="/resources/node_modules/brython/brython.js"></script>
% end
%#
% if "d3" in load:
  <script src="/resources/node_modules/d3/dist/d3.min.js"></script>
% end
%#
% if "vue" in load:
  <style>[v-cloak]{display:none;}</style>
  <script src="/resources/node_modules/vue/dist/vue.global.js"></script>
% elif "alpine" in load:
  <script src="/resources/node_modules/alpinejs/dist/alpine.js"></script>
% end
%#
% if "vue" in load and "reql" in load:
  <script>
    // provide data exchange capabilities
    class DataHub {
      constructor(dbname) {
        this.route = `/data/${dbname}`;
        this.websocket = new WebSocket(`ws://{%__host__%}${this.route}`);
        document.addEventListener("unload",()=>this.websocket.close());
        this.websocket.onmessage = (event) => this.onmessage(event);
      }
      fetchJSON(scope) {
        return fetch("/data", {
          method: "POST",
          headers: {"Content-Type": "application/json"},
          body: JSON.stringify(scope)
        }).then(response => response.json())
      }
      setVueAttr(attr,run) {
        if (this.hasOwnProperty("reql")) {run = this.reql};
        this.fetchJSON({ run: run,
          target: `vmodel.$data.${attr}`
        }).then(data => eval(`${data.target} = data.value`))
      }
      setValueFromId(header) {
        //FIXME: only for test
        let id, run;
        if (this.hasOwnProperty("reql")) {
          run = this.reql;
          id = this.filterarg.id;
        };
        this.fetchJSON({ run: run,
          target: `document.getElementById("${id}").value`
        }).then(data => eval(`${data.target} = data.value[0].${header}`))
      }
    }
    // provide ReQL capabilities
    class RethinkDB extends DataHub {
      constructor(dbname) {
        super(dbname);
        this.dbname = dbname;
      }
      table(tablename) {
        // init a new RethinkDB query 
        this.tablename = tablename;
        this.filterJSON = undefined;
        this.updateJSON = undefined;
        this.reql = `table("${this.tablename}")`;
        return this
      }
      count(arg="") {
        this.reql += `.count(${arg.toString()})`;
        return this
      }
      filter(json) {
        this.filterarg = json;
        this.filterJSON = JSON.stringify(json);
        this.reql += `.filter(${this.filterJSON})`;
        return this
      }
      update(json,allow="update|insert") {
        this.updateJSON = JSON.stringify(json);
        this.reql += `.update(${this.updateJSON})`;
        this.websocket.send(JSON.stringify({
          run: allow,
          table: this.tablename,
          filter: this.filterJSON,
          update: this.updateJSON
        }))
      }
    }
    r = new RethinkDB("{% dbname %}");

    // set default Vue3 utilities
    function createVueApp(vuedata, options={
          vm: "vmodel", id: "VueApp", hub: r
        }) {
      if ( typeof(vuedata) == "object" ) {
        // should be a JavaScript function call case
        // here vuedata allows setting the entire vue model
        document.addEventListener("DOMContentLoaded",function(){
          let vm = Vue.createApp(vuedata).mount(`#${options.id}`);
          eval(`${options.vm} = vm`);
        })
      } else if ( typeof(vuedata) == "string" ) {
        // should be a Brython function call case
        let vm = Vue.createApp({
          data() { return JSON.parse(vuedata) },
          created() { try {vuecreated(this.$data)} catch(err){} },
          methods: { 
            update(event) { 
              const sep = event.target.id.indexOf(":");
              event.target.tableRowId = event.target.id.slice(0,sep);
              event.target.tableColHeader = event.target.id.slice(sep+1);
              options.hub.onupdate(event);
            },
            tableId(row,header) {
              const vm = eval(`${options.vm}`);
              return `${vm.table[row]['id']}:${header}`
            }
          }
        }).mount(`#${options.id}`);
        eval(`${options.vm} = vm`);
      }
    }
  </script>
% end
%#
</head>
% if "py" in load:
<body onload="brython({% get('__debug__',0) %})">
% else:
<body>
% end
{% !base %}
<p style="margin-top:1.5rem;font-size:0.875rem;line-height:1.25rem;font-weight:200;text-align:center;--tw-text-opacity:1;color:rgb(185, 185, 185);">
  <em>made with Sweetheart</em></p>
<script>
  // set title from first <h1> element
  const heading = document.getElementsByTagName("h1")[0];
  if (heading != null) document.title = heading.innerText;
</script>
</body>
</html>
