<%
# PYTHON optionnal args:
# load = "tailwind|bootstrap|w3 py|pylibs alpine|vue reql d3"
load = get('load',get('__load__',''))
lang = get('lang',get('__lang__','en'))
dbname = get('dbname',get('__db__','test'))
%>
<!DOCTYPE html>
<html lang="{% lang %}">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
%#
% if "tailwind" in load:
  <link rel="stylesheet" href="/resources/tailwind.css">
% elif "bootstrap" in load:
  <!--[if IE]><meta http-equiv="X-UA-Compatible" content="IE=edge"><![endif]-->
  <link rel="stylesheet" href="/resources/node_modules/bootstrap/dist/css/bootstrap.min.css">
  <script src="/resources/node_modules/jquery/dist/jquery.slim.min.js"></script>
  <script src="/resources/node_modules/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
% elif "w3" in load:
  <link rel="stylesheet" href="/resources/w3.css">
% end
%#
% if "pylibs" in load:
  <script src="/resources/node_modules/brython/brython.js"></script>
  <script src="/resources/node_modules/brython/brython_stdlib.js"></script>
% elif "py" in load: 
  <script src="/resources/node_modules/brython/brython.js"></script>
% end
%#
% if "d3" in load:
  <script src="/resources/node_modules/d3/dist/d3.min.js"></script>
% end
%#
% if "vue" in load:
  <style>[v-cloak]{display:none;}</style>
  <script src="/resources/node_modules/vue/dist/vue.global.js"></script>
% elif "alpine" in load:
  <script src="/resources/node_modules/alpinejs/dist/alpine.js"></script>
% end
%#
% if "vue" in load and "reql" in load:
  <script>
    // set ReQL and Websocket capabilities
    class RethinkDB {
      constructor(dbname="{% dbname %}") {
        // set websocket utilities
        this.websocket = new WebSocket(`ws://{%__host__%}/data/${dbname}`);
        document.addEventListener("unload",()=>this.websocket.close());
        // default settings
        this.database_name = dbname;
        this.default_message = "update|insert";
      }
      table(tablename) {
        // init a new RethinkDB query 
        this.message = undefined;
        this.tablename = tablename;
        this.filterJSON = undefined;
        this.updateJSON = undefined;
        this.reql = `table("${this.tablename}")`;
        return this
      }
      count(arg="") {
        this.reql += `.count(${arg.toString()})`;
        return this
      }
      filter(json) {
        this.filterJSON = JSON.stringify(json);
        this.reql += `.filter(${this.filterJSON})`;
        return this
      }
      update(json) {
        this.updateJSON = JSON.stringify(json);
        this.reql += `.update(${this.updateJSON})`;
        return this
      }
      send(scope=this.default_message) {
        console.log(this.reql);
        if ( scope == "update|insert" ) { 
          this.websocket.send(JSON.stringify({
            message: scope,
            table: this.tablename,
            filter: this.filterJSON,
            update: this.updateJSON
          }) )
        } else if ( scope.slice(0,6) == "table(" ) {
          this.websocket.send(JSON.stringify({
            message: "reql",
            reql: exec
          }) )
        } else if ( scope == "setVueData" ) {
          this.websocket.send(JSON.stringify({
            message: "reql",
            scope: scope,
            reql: this.reql
          }) )
        }
      }
      fetch(reql=this.reql) {
        return fetch("/reql",{
          method: "POST",
          headers: {"Content-Type": "application/json"},
          body: JSON.stringify({"reql": reql})
        }).then(response => response.json())
          .then(json => json.data)
      }
      async set(attr) {
        this.websocket.send(JSON.stringify({
            message: "reql",
            scope: "setVueData",
            attribute: attr,
            reql: this.reql
          }) )
        await r.set
      }
    }
    r = new RethinkDB();
    websocket = r.websocket;

    // set default Vue3 utilities
    function setVueData(vdata) {

    }

    function createVueApp(vuedata) {
      if ( typeof(vuedata) == "object" ) {
        // should be a JavaScript function call case
        document.addEventListener("DOMContentLoaded",function(){
          vuemodel = Vue.createApp({
            data() { return vuedata },
            methods: { update(event) { r.websocket.onupdate(event) }}
          }).mount("#VueApp")
        })
      } else if ( typeof(vuedata) == "string" ) {
        // should be a Brython function call case
        vuemodel = Vue.createApp({
          data() { return JSON.parse(vuedata) },
          mounted() { vuemounted(this.$data) },
          methods: { update(event) { r.websocket.onupdate(event) }}
          }).mount("#VueApp")
      }
    }
  </script>
% end
%#
</head>
% if "py" in load:
<body onload="brython({% get('__debug__',0) %})">
% else:
<body>
% end
{% !base %}
<script>
  // set title from first <h1> element
  const heading = document.getElementsByTagName("h1")[0];
  if (heading != null) document.title = heading.innerText;
</script>
</body>
</html>
